---
layout: layouts/base.njk
title: jisk
---

{% block content %}
<section class="intro">
  <p>
    This is a web tool that helps you jump from a specific web
    service to an alternative front end, such as Redlib, Invidious, and others. The tool automatically selects one
    of the available instances for the service youâ€™re redirecting to, which is particularly useful when combined
    with browser extensions for automatic redirects.
  </p>
</section>

<section class="info">
  <h3>Redirection URL Builder</h3>
  <p>The redirection URL is generated based on the following parameters at the bottom:</p>
  <div class="form-group">
    <label for="service">Alternative front end</label>
    <select id="service" name="service">
      {% for service in services.services %}
        <option value="{{ service.id }}">{{ service.name }}</option>
      {% endfor %}
    </select>
    <small>The alternative service you want to redirect to.</small>
  </div>

  <div class="form-group">
    <label for="url">Source URL</label>
    <input type="text" id="url" name="url" required>
    <div class="form-check">
      <input type="checkbox" id="encodesUrl" name="encodesUrl" checked>
      <label for="encodesUrl">Apply URL encoding</label>
    </div>
    <small>The original URL you want to redirect from. You may use "$0" without URL encoding for automatic redirection through your browser extension.</small>
  </div>

  <div class="form-group">
    <label for="countries">Country codes (optional):</label>
    <input type="text" id="countries" name="countries" placeholder="JP, TW">
    <small>Country codes for the locations of the instances (e.g., JP for Japan, TW for Taiwan), listed in a comma-separated, case-insensitive format.</small>
  </div>

  {# preferred_instances #}
  <div class="form-group">
    <label for="preferred-instances">Preferred instances (optional):</label>
    <input type="text" id="preferred-instances" name="preferred-instances" placeholder="preferred-instance.example.com">
    <small>The specified instances will be prioritized to check availability.</small>
  </div>

  <div class="form-group">
    <label for="cache-expiry">Cache expiry (seconds, optional):</label>
    <input type="number" id="cache-expiry" name="cache-expiry" placeholder="86400">
    <small>The cache expiry time in seconds (e.g., 86400 for 24 hours). If you set 0, jisk doesn't remember the instance selected last time.</small>
  </div>

  <div id="result" class="example"></div>
</section>

<section id="examples" class="info example">
  <h3>Examples</h3>
  <ul>
  </ul>
</section>

<script type="module">
  import { makeRedirectionUrl } from './assets/js/redirectionUrlBuilder.js';

  const services = {{ services.services | dump | safe }}

  let baseUrl = "{{ baseUrl }}";
  if (baseUrl === '') {
    baseUrl = window.location.origin;
  }
  {# TODO: Remove this when this issue is completed: https://codeberg.org/Codeberg/pages-server/issues/298 #}
  const hasHtmlExtension = new URL(baseUrl).hostname.endsWith('.codeberg.page')
  
  function parseCommaSeparatedList(input) {
    return input.split(',')
      .map(item => item.trim())
      .filter(item => item.length > 0);
  }

  function updateUI() {
    const serviceId = document.getElementById('service').value;
    const urlEl = document.getElementById('url')
    const sourceUrl = urlEl.value;
    const encodesSourceUrl = document.getElementById('encodesUrl').checked;
    const cacheExpiry = document.getElementById('cache-expiry').value;
    const countries = parseCommaSeparatedList(document.getElementById('countries').value);
    const preferredInstanceHosts = parseCommaSeparatedList(document.getElementById('preferred-instances').value);

    urlEl.placeholder = services.find(service => service.id === serviceId).urlPlaceholder;

    const redirectUrl = makeRedirectionUrl({
      baseUrl,
      serviceId,
      sourceUrl,
      encodesSourceUrl,
      countries,
      hasHtmlExtension,
      cacheExpiry,
      preferredInstanceHosts,
    });
    const resultDiv = document.getElementById('result');
    resultDiv.innerHTML = `<p>Generated Redirect URL:</p><a href="${redirectUrl}" target="_blank">${redirectUrl}</a>`;
  }

  function setupExamples() {
    const examplesEl = document.getElementById('examples').querySelector('ul');
    const examples = [
      {
        serviceId: 'invidious',
        sourceUrl: 'https://www.youtube.com/watch?v=FMZDJ0yVA3g',
      },
      {
        serviceId: 'redlib',
        sourceUrl: 'https://new.reddit.com/r/mildlyinteresting/comments/7ub9ax/local_mexican_restaurant_used_to_be_a_chinese/',
      },
      {
        serviceId: 'rimgo',
        sourceUrl: 'https://imgur.com/gallery/daily-snick-pic-43-ZKmPPvy#/t/aww',
      }
    ]
    for (const example of examples) {
      const redirectUrl = makeRedirectionUrl({
        baseUrl,
        hasHtmlExtension,
        ...example,
      });
      examplesEl.innerHTML += `<li><a href="${redirectUrl}" target="_blank">${redirectUrl}</a></li>`;
    }
  }

  document.getElementById('service').addEventListener('change', updateUI);
  document.getElementById('url').addEventListener('input', updateUI);
  document.getElementById('encodesUrl').addEventListener('change', updateUI);
  document.getElementById('countries').addEventListener('input', updateUI);
  document.getElementById('cache-expiry').addEventListener('input', updateUI);
  document.getElementById('preferred-instances').addEventListener('input', updateUI);

  updateUI();
  setupExamples();
</script>
{% endblock %}
